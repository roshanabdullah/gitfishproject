{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/myFishProject/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar h = Object.defineProperty;\nvar m = Object.getOwnPropertySymbols;\nvar u = Object.prototype.hasOwnProperty,\n    y = Object.prototype.propertyIsEnumerable;\n\nvar P = function P(r, e, s) {\n  return e in r ? h(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: s\n  }) : r[e] = s;\n},\n    o = function o(r, e) {\n  for (var s in e || (e = {})) {\n    u.call(e, s) && P(r, s, e[s]);\n  }\n\n  if (m) {\n    var _iterator = _createForOfIteratorHelper(m(e)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var s = _step.value;\n        y.call(e, s) && P(r, s, e[s]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return r;\n};\n\nvar f = function f(r, e) {\n  return h(r, \"name\", {\n    value: e,\n    configurable: !0\n  });\n};\n\nimport c from \"node-polyglot\";\nvar w = f(function (r) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"en\";\n  var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var a = e,\n      l = r(e);\n  if (l instanceof Promise) throw new Error(\"The i18nProvider returned a Promise for the messages of the default locale (\".concat(e, \"). Please update your i18nProvider to return the messages of the default locale in a synchronous way.\"));\n  var i = new c(o({\n    locale: a,\n    phrases: o({\n      \"\": \"\"\n    }, l)\n  }, s)),\n      g = i.t.bind(i);\n  return {\n    translate: function translate(t) {\n      var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return g(t, n);\n    },\n    changeLocale: function changeLocale(t) {\n      return Promise.resolve(r(t)).then(function (n) {\n        a = t;\n        var d = new c(o({\n          locale: t,\n          phrases: o({\n            \"\": \"\"\n          }, n)\n        }, s));\n        g = d.t.bind(d);\n      });\n    },\n    getLocale: function getLocale() {\n      return a;\n    }\n  };\n}, \"default\");\nexport { w as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAuBA,IAAOA,IAAQC,YACXC,CADW,EAII;AAAA,MAFfC,CAEe,uEAFS,IAET;AAAA,MADfC,CACe,uEADQ,EACR;AACf,MAAIC,IAASF,CAAb;AAAA,MACMG,IAAWJ,EAAYC,CAAZ,CADjB;AAEA,MAAIG,aAAoBC,OAAxB,EACI,MAAM,IAAIC,KAAJ,uFAC6EL,CAD7E,2GAAN;AAIJ,MAAMM,IAAW,IAAIC,CAAJ,CAAaC;AAC1BC,aAD0B;AAE1BC,aAASF;AAAE,UAAI;AAAN,OAAaL,CAAb;AAFiB,KAGvBF,CAHuB,CAAb,CAAjB;AAAA,MAKIU,IAAYL,EAASM,CAAT,CAAWC,IAAX,CAAgBP,CAAhB,CALhB;AAOA,SAAO;AACHQ,eAAW,mBAACF,CAAD;AAAA,UAAcG,CAAd,uEAA6B,EAA7B;AAAA,aAAoCJ,EAAUC,CAAV,EAAeG,CAAf,CAApC;AAAA,KADR;AAEHC,kBAAc,uBAAC;AAAA,aAGXZ,QAAQa,OAAR,CAAgBlB,EAAYa,CAAZ,CAAhB,EAAkDM,IAAlD,CACI,WAAC,EAAkC;AAC/BhB,YAASU,CAAT;AACA,YAAMO,IAAc,IAAIZ,CAAJ,CAAaC;AAC7BC,kBAAQG,CADqB;AAE7BF,mBAASF;AAAE,gBAAI;AAAN,aAAaO,CAAb;AAFoB,WAG1Bd,CAH0B,CAAb,CAApB;AAKAU,YAAYQ,EAAYP,CAAZ,CAAcC,IAAd,CAAmBM,CAAnB,CAAZ;AAA+B,OARvC,CAHW;AAAA,KAFZ;AAgBHC,eAAW;AAAA,aAAMlB,CAAN;AAAA;AAhBR,GAAP;AAgBqB,CAnCV,YAAf;AAAe","names":["w","f","r","e","s","a","l","Promise","Error","i","c","o","locale","phrases","g","t","bind","translate","n","changeLocale","resolve","then","d","getLocale"],"sources":["D:\\myFishProject\\frontend\\node_modules\\ra-i18n-polyglot\\src\\index.ts"],"sourcesContent":["import Polyglot from 'node-polyglot';\n\nimport { I18nProvider, TranslationMessages } from 'ra-core';\n\ntype GetMessages = (\n    locale: string\n) => TranslationMessages | Promise<TranslationMessages>;\n\n/**\n * Build a polyglot-based i18nProvider based on a function returning the messages for a locale\n *\n * @example\n *\n * import { Admin, Resource, polyglotI18nProvider } from 'react-admin';\n * import englishMessages from 'ra-language-english';\n * import frenchMessages from 'ra-language-french';\n *\n * const messages = {\n *     fr: frenchMessages,\n *     en: englishMessages,\n * };\n * const i18nProvider = polyglotI18nProvider(locale => messages[locale])\n */\nexport default (\n    getMessages: GetMessages,\n    initialLocale: string = 'en',\n    polyglotOptions: any = {}\n): I18nProvider => {\n    let locale = initialLocale;\n    const messages = getMessages(initialLocale);\n    if (messages instanceof Promise) {\n        throw new Error(\n            `The i18nProvider returned a Promise for the messages of the default locale (${initialLocale}). Please update your i18nProvider to return the messages of the default locale in a synchronous way.`\n        );\n    }\n    const polyglot = new Polyglot({\n        locale,\n        phrases: { '': '', ...messages },\n        ...polyglotOptions,\n    });\n    let translate = polyglot.t.bind(polyglot);\n\n    return {\n        translate: (key: string, options: any = {}) => translate(key, options),\n        changeLocale: (newLocale: string) =>\n            // We systematically return a Promise for the messages because\n            // getMessages may return a Promise\n            Promise.resolve(getMessages(newLocale as string)).then(\n                (messages: TranslationMessages) => {\n                    locale = newLocale;\n                    const newPolyglot = new Polyglot({\n                        locale: newLocale,\n                        phrases: { '': '', ...messages },\n                        ...polyglotOptions,\n                    });\n                    translate = newPolyglot.t.bind(newPolyglot);\n                }\n            ),\n        getLocale: () => locale,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar inspect = require('object-inspect');\n\nvar IsPropertyKey = require('./IsPropertyKey');\n\nvar Type = require('./Type');\n/**\r\n * 7.3.1 Get (O, P) - https://ecma-international.org/ecma-262/6.0/#sec-get-o-p\r\n * 1. Assert: Type(O) is Object.\r\n * 2. Assert: IsPropertyKey(P) is true.\r\n * 3. Return O.[[Get]](P, O).\r\n */\n\n\nmodule.exports = function Get(O, P) {\n  // 7.3.1.1\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(O) is not Object');\n  } // 7.3.1.2\n\n\n  if (!IsPropertyKey(P)) {\n    throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true, got ' + inspect(P));\n  } // 7.3.1.3\n\n\n  return O[P];\n};","map":{"version":3,"sources":["D:/myFishProject/frontend/node_modules/es-abstract/2021/Get.js"],"names":["GetIntrinsic","require","$TypeError","inspect","IsPropertyKey","Type","module","exports","Get","O","P"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,OAAO,GAAGF,OAAO,CAAC,gBAAD,CAArB;;AAEA,IAAIG,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACnC;AACA,MAAIL,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAhB,EAA0B;AACzB,UAAM,IAAIP,UAAJ,CAAe,yCAAf,CAAN;AACA,GAJkC,CAKnC;;;AACA,MAAI,CAACE,aAAa,CAACM,CAAD,CAAlB,EAAuB;AACtB,UAAM,IAAIR,UAAJ,CAAe,yDAAyDC,OAAO,CAACO,CAAD,CAA/E,CAAN;AACA,GARkC,CASnC;;;AACA,SAAOD,CAAC,CAACC,CAAD,CAAR;AACA,CAXD","sourcesContent":["'use strict';\r\n\r\nvar GetIntrinsic = require('get-intrinsic');\r\n\r\nvar $TypeError = GetIntrinsic('%TypeError%');\r\n\r\nvar inspect = require('object-inspect');\r\n\r\nvar IsPropertyKey = require('./IsPropertyKey');\r\nvar Type = require('./Type');\r\n\r\n/**\r\n * 7.3.1 Get (O, P) - https://ecma-international.org/ecma-262/6.0/#sec-get-o-p\r\n * 1. Assert: Type(O) is Object.\r\n * 2. Assert: IsPropertyKey(P) is true.\r\n * 3. Return O.[[Get]](P, O).\r\n */\r\n\r\nmodule.exports = function Get(O, P) {\r\n\t// 7.3.1.1\r\n\tif (Type(O) !== 'Object') {\r\n\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\r\n\t}\r\n\t// 7.3.1.2\r\n\tif (!IsPropertyKey(P)) {\r\n\t\tthrow new $TypeError('Assertion failed: IsPropertyKey(P) is not true, got ' + inspect(P));\r\n\t}\r\n\t// 7.3.1.3\r\n\treturn O[P];\r\n};\r\n"]},"metadata":{},"sourceType":"script"}
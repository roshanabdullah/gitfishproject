{"ast":null,"code":"var I = Object.defineProperty;\n\nvar i = function i(o, e) {\n  return I(o, \"name\", {\n    value: e,\n    configurable: !0\n  });\n};\n\nimport * as r from \"react\";\nimport { localStorageStore as w } from \"ra-core\";\nimport { AdminUI as E, AdminContext as M } from \"ra-ui-materialui\";\nimport O from \"ra-language-english\";\nimport q from \"ra-i18n-polyglot\";\nvar m = q(function () {\n  return O;\n}, \"en\", {\n  allowMissing: !0\n});\nvar N = i(function (o) {\n  var e = o.authProvider,\n      d = o.basename,\n      s = o.catchAll,\n      p = o.children,\n      l = o.dashboard,\n      u = o.dataProvider,\n      f = o.disableTelemetry,\n      c = o.history,\n      h = o.i18nProvider,\n      P = o.layout,\n      A = o.loading,\n      t = o.loginPage,\n      g = o.menu,\n      v = o.notification,\n      x = o.requireAuth,\n      y = o.store,\n      b = o.ready,\n      C = o.theme,\n      _o$title = o.title,\n      T = _o$title === void 0 ? \"React Admin\" : _o$title;\n  return t === !0 && process.env.NODE_ENV !== \"production\" && console.warn(\"You passed true to the loginPage prop. You must either pass false to disable it or a component class to customize it\"), r.createElement(M, {\n    authProvider: e,\n    basename: d,\n    dataProvider: u,\n    i18nProvider: h,\n    store: y,\n    history: c,\n    theme: C\n  }, r.createElement(E, {\n    layout: P,\n    dashboard: l,\n    disableTelemetry: f,\n    menu: g,\n    catchAll: s,\n    title: T,\n    loading: A,\n    loginPage: t,\n    notification: v,\n    requireAuth: x,\n    ready: b\n  }, p));\n}, \"Admin\");\nN.defaultProps = {\n  i18nProvider: m,\n  store: w()\n};\nexport * from \"ra-core\";\nexport * from \"ra-ui-materialui\";\nexport { N as Admin, m as defaultI18nProvider };","map":{"version":3,"mappings":";;;;;;;;;AAAA;AAEA;AACA;ACHA;AACA;AAEO,IAAMA,IAAsBC,EAC/B;AAAA,SAAMC,CAAN;AAAA,CAD+B,EAE/B,IAF+B,EAG/B;AACIC,gBAAc;AADlB,CAH+B,CAA5B;ADwFA,IAAMC,IAAQC,EAAC,aAAsB;AACxC,MACIC,CADJ,GAoBIC,CApBJ,CACIC,YADJ;AAAA,MAEIC,CAFJ,GAoBIF,CApBJ,CAEIG,QAFJ;AAAA,MAGIC,CAHJ,GAoBIJ,CApBJ,CAGIK,QAHJ;AAAA,MAIIC,CAJJ,GAoBIN,CApBJ,CAIIO,QAJJ;AAAA,MAKIC,CALJ,GAoBIR,CApBJ,CAKIS,SALJ;AAAA,MAMIC,CANJ,GAoBIV,CApBJ,CAMIW,YANJ;AAAA,MAOIC,CAPJ,GAoBIZ,CApBJ,CAOIa,gBAPJ;AAAA,MAQIC,CARJ,GAoBId,CApBJ,CAQIe,OARJ;AAAA,MASIC,CATJ,GAoBIhB,CApBJ,CASIiB,YATJ;AAAA,MAUIC,CAVJ,GAoBIlB,CApBJ,CAUImB,MAVJ;AAAA,MAWIC,CAXJ,GAoBIpB,CApBJ,CAWIqB,OAXJ;AAAA,MAYIC,CAZJ,GAoBItB,CApBJ,CAYIuB,SAZJ;AAAA,MAaIC,CAbJ,GAoBIxB,CApBJ,CAaIyB,IAbJ;AAAA,MAcIC,CAdJ,GAoBI1B,CApBJ,CAcI2B,YAdJ;AAAA,MAeIC,CAfJ,GAoBI5B,CApBJ,CAeI6B,WAfJ;AAAA,MAgBIC,CAhBJ,GAoBI9B,CApBJ,CAgBI+B,KAhBJ;AAAA,MAiBIC,CAjBJ,GAoBIhC,CApBJ,CAiBIiC,KAjBJ;AAAA,MAkBIC,CAlBJ,GAoBIlC,CApBJ,CAkBImC,KAlBJ;AAAA,iBAoBInC,CApBJ,CAmBIoC,KAnBJ;AAAA,MAmBIC,CAnBJ,yBAmBY,aAnBZ;AAsBA,SAAIf,MAAc,EAAd,IAAsBgB,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA/C,IACAC,QAAQC,IAAR,CACI,sHADJ,CADA,EAOAC,gBAACC,CAAD;AACI3C,kBAAcF,CADlB;AAEII,cAAUD,CAFd;AAGIS,kBAAcD,CAHlB;AAIIO,kBAAcD,CAJlB;AAKIe,WAAOD,CALX;AAMIf,aAASD,CANb;AAOIqB,WAAOD;AAPX,KASIS,gBAACE,CAAD;AACI1B,YAAQD,CADZ;AAEIT,eAAWD,CAFf;AAGIK,sBAAkBD,CAHtB;AAIIa,UAAMD,CAJV;AAKInB,cAAUD,CALd;AAMIgC,WAAOC,CANX;AAOIhB,aAASD,CAPb;AAQIG,eAAWD,CARf;AASIK,kBAAcD,CATlB;AAUIG,iBAAaD,CAVjB;AAWIK,WAAOD;AAXX,KAaK1B,CAbL,CATJ,CAPJ;AA6Ba,CApDI,UAAd;AA0DPT,EAAMiD,YAAN,GAAqB;AACjB7B,gBAAcxB,CADG;AAEjBsC,SAAOgB;AAFU,CAArB;AEnJA;AACA;AAAA","names":["m","q","O","allowMissing","N","i","e","o","authProvider","d","basename","s","catchAll","p","children","l","dashboard","u","dataProvider","f","disableTelemetry","c","history","h","i18nProvider","P","layout","A","loading","t","loginPage","g","menu","v","notification","x","requireAuth","y","store","b","ready","C","theme","title","T","process","env","NODE_ENV","console","warn","r","M","E","defaultProps","w"],"sources":["D:\\myFishProject\\frontend\\node_modules\\react-admin\\src\\Admin.tsx","D:\\myFishProject\\frontend\\node_modules\\react-admin\\src\\defaultI18nProvider.ts","D:\\myFishProject\\frontend\\node_modules\\react-admin\\src\\index.ts"],"sourcesContent":["import * as React from 'react';\nimport { ComponentType } from 'react';\nimport { CoreAdminProps, localStorageStore } from 'ra-core';\nimport { AdminUI, AdminContext } from 'ra-ui-materialui';\nimport { ThemeOptions } from '@mui/material';\n\nimport { defaultI18nProvider } from './defaultI18nProvider';\n\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </Admin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <Admin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\nimport { useEffect, useState } from 'react';\n * import {\n *     AdminContext,\n *     AdminUI,\n *     defaultI18nProvider,\n *     localStorageStore,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const store = localStorageStore();\n *\n * const App = () => (\n *     <AdminContext dataProvider={myDataProvider} i18nProvider={defaultI18nProvider} store={store}>\n *         <Resources />\n *     </AdminContext>\n * );\n *\n * const Resources = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <AdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </AdminUI>\n *     );\n * };\n */\nexport const Admin = (props: AdminProps) => {\n    const {\n        authProvider,\n        basename,\n        catchAll,\n        children,\n        dashboard,\n        dataProvider,\n        disableTelemetry,\n        history,\n        i18nProvider,\n        layout,\n        loading,\n        loginPage,\n        menu, // deprecated, use a custom layout instead\n        notification,\n        requireAuth,\n        store,\n        ready,\n        theme,\n        title = 'React Admin',\n    } = props;\n\n    if (loginPage === true && process.env.NODE_ENV !== 'production') {\n        console.warn(\n            'You passed true to the loginPage prop. You must either pass false to disable it or a component class to customize it'\n        );\n    }\n\n    return (\n        <AdminContext\n            authProvider={authProvider}\n            basename={basename}\n            dataProvider={dataProvider}\n            i18nProvider={i18nProvider}\n            store={store}\n            history={history}\n            theme={theme}\n        >\n            <AdminUI\n                layout={layout}\n                dashboard={dashboard}\n                disableTelemetry={disableTelemetry}\n                menu={menu}\n                catchAll={catchAll}\n                title={title}\n                loading={loading}\n                loginPage={loginPage}\n                notification={notification}\n                requireAuth={requireAuth}\n                ready={ready}\n            >\n                {children}\n            </AdminUI>\n        </AdminContext>\n    );\n};\n\nAdmin.defaultProps = {\n    i18nProvider: defaultI18nProvider,\n    store: localStorageStore(),\n};\n\nexport default Admin;\n\nexport interface AdminProps extends CoreAdminProps {\n    theme?: ThemeOptions;\n    notification?: ComponentType;\n}\n","import defaultMessages from 'ra-language-english';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\n\nexport const defaultI18nProvider = polyglotI18nProvider(\n    () => defaultMessages,\n    'en',\n    {\n        allowMissing: true,\n    }\n);\n","export * from './Admin';\nexport * from './defaultI18nProvider';\nexport * from 'ra-core';\nexport * from 'ra-ui-materialui';\n"]},"metadata":{},"sourceType":"module"}
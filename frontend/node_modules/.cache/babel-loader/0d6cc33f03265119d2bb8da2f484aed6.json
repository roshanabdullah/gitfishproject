{"ast":null,"code":"var I = Object.defineProperty;\n\nvar i = (o, e) => I(o, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nimport * as r from \"react\";\nimport { localStorageStore as w } from \"ra-core\";\nimport { AdminUI as E, AdminContext as M } from \"ra-ui-materialui\";\nimport O from \"ra-language-english\";\nimport q from \"ra-i18n-polyglot\";\nvar m = q(() => O, \"en\", {\n  allowMissing: !0\n});\nvar N = i(o => {\n  let {\n    authProvider: e,\n    basename: d,\n    catchAll: s,\n    children: p,\n    dashboard: l,\n    dataProvider: u,\n    disableTelemetry: f,\n    history: c,\n    i18nProvider: h,\n    layout: P,\n    loading: A,\n    loginPage: t,\n    menu: g,\n    notification: v,\n    requireAuth: x,\n    store: y,\n    ready: b,\n    theme: C,\n    title: T = \"React Admin\"\n  } = o;\n  return t === !0 && process.env.NODE_ENV !== \"production\" && console.warn(\"You passed true to the loginPage prop. You must either pass false to disable it or a component class to customize it\"), r.createElement(M, {\n    authProvider: e,\n    basename: d,\n    dataProvider: u,\n    i18nProvider: h,\n    store: y,\n    history: c,\n    theme: C\n  }, r.createElement(E, {\n    layout: P,\n    dashboard: l,\n    disableTelemetry: f,\n    menu: g,\n    catchAll: s,\n    title: T,\n    loading: A,\n    loginPage: t,\n    notification: v,\n    requireAuth: x,\n    ready: b\n  }, p));\n}, \"Admin\");\nN.defaultProps = {\n  i18nProvider: m,\n  store: w()\n};\nexport * from \"ra-core\";\nexport * from \"ra-ui-materialui\";\nexport { N as Admin, m as defaultI18nProvider };","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;AACA;ACHA;AACA;AAEO,IAAMA,IAAsBC,EAC/B,MAAMC,CADyB,EAE/B,IAF+B,EAG/B;AACIC,gBAAc;AADlB,CAH+B,CAA5B;ADwFA,IAAMC,IAAQC,EAACC,KAAsB;AACxC,MAAM;AACFC,mBADE;AAEFC,eAFE;AAGFC,eAHE;AAIFC,eAJE;AAKFC,gBALE;AAMFC,mBANE;AAOFC,uBAPE;AAQFC,cARE;AASFC,mBATE;AAUFC,aAVE;AAWFC,cAXE;AAYFC,gBAZE;AAaFC,WAbE;AAcFC,mBAdE;AAeFC,kBAfE;AAgBFC,YAhBE;AAiBFC,YAjBE;AAkBFC,YAlBE;AAmBFC,eAAQ;AAnBN,MAoBFnB,CApBJ;AAsBA,SAAIoB,MAAc,EAAd,IAAsBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA/C,IACAC,QAAQC,IAAR,CACI,sHADJ,CADA,EAOAC,gBAACC,CAAD;AACI1B,kBAAc2B,CADlB;AAEI1B,cAAU2B,CAFd;AAGIvB,kBAAcwB,CAHlB;AAIIrB,kBAAcsB,CAJlB;AAKIf,WAAOgB,CALX;AAMIxB,aAASyB,CANb;AAOIf,WAAOgB;AAPX,KASIR,gBAACS,CAAD;AACIzB,YAAQ0B,CADZ;AAEI/B,eAAWgC,CAFf;AAGI9B,sBAAkB+B,CAHtB;AAIIzB,UAAM0B,CAJV;AAKIpC,cAAUqC,CALd;AAMIrB,WAAOsB,CANX;AAOI9B,aAAS+B,CAPb;AAQI9B,eAAWQ,CARf;AASIN,kBAAc6B,CATlB;AAUI5B,iBAAa6B,CAVjB;AAWI3B,WAAO4B;AAXX,KAaKC,CAbL,CATJ,CAPJ;AA6Ba,CApDI,UAAd;AA0DPhD,EAAMiD,YAAN,GAAqB;AACjBtC,gBAAcf,CADG;AAEjBsB,SAAOgC;AAFU,CAArB;AEnJA;AACA;AAAA","names":["m","q","O","allowMissing","N","i","o","authProvider","basename","catchAll","children","dashboard","dataProvider","disableTelemetry","history","i18nProvider","layout","loading","loginPage","menu","notification","requireAuth","store","ready","theme","title","t","process","env","NODE_ENV","console","warn","r","M","e","d","u","h","y","c","C","E","P","l","f","g","s","T","A","v","x","b","p","defaultProps","w"],"sources":["D:\\myFishProject\\frontend\\node_modules\\react-admin\\src\\Admin.tsx","D:\\myFishProject\\frontend\\node_modules\\react-admin\\src\\defaultI18nProvider.ts","D:\\myFishProject\\frontend\\node_modules\\react-admin\\src\\index.ts"],"sourcesContent":["import * as React from 'react';\nimport { ComponentType } from 'react';\nimport { CoreAdminProps, localStorageStore } from 'ra-core';\nimport { AdminUI, AdminContext } from 'ra-ui-materialui';\nimport { ThemeOptions } from '@mui/material';\n\nimport { defaultI18nProvider } from './defaultI18nProvider';\n\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </Admin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <Admin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\nimport { useEffect, useState } from 'react';\n * import {\n *     AdminContext,\n *     AdminUI,\n *     defaultI18nProvider,\n *     localStorageStore,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const store = localStorageStore();\n *\n * const App = () => (\n *     <AdminContext dataProvider={myDataProvider} i18nProvider={defaultI18nProvider} store={store}>\n *         <Resources />\n *     </AdminContext>\n * );\n *\n * const Resources = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <AdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </AdminUI>\n *     );\n * };\n */\nexport const Admin = (props: AdminProps) => {\n    const {\n        authProvider,\n        basename,\n        catchAll,\n        children,\n        dashboard,\n        dataProvider,\n        disableTelemetry,\n        history,\n        i18nProvider,\n        layout,\n        loading,\n        loginPage,\n        menu, // deprecated, use a custom layout instead\n        notification,\n        requireAuth,\n        store,\n        ready,\n        theme,\n        title = 'React Admin',\n    } = props;\n\n    if (loginPage === true && process.env.NODE_ENV !== 'production') {\n        console.warn(\n            'You passed true to the loginPage prop. You must either pass false to disable it or a component class to customize it'\n        );\n    }\n\n    return (\n        <AdminContext\n            authProvider={authProvider}\n            basename={basename}\n            dataProvider={dataProvider}\n            i18nProvider={i18nProvider}\n            store={store}\n            history={history}\n            theme={theme}\n        >\n            <AdminUI\n                layout={layout}\n                dashboard={dashboard}\n                disableTelemetry={disableTelemetry}\n                menu={menu}\n                catchAll={catchAll}\n                title={title}\n                loading={loading}\n                loginPage={loginPage}\n                notification={notification}\n                requireAuth={requireAuth}\n                ready={ready}\n            >\n                {children}\n            </AdminUI>\n        </AdminContext>\n    );\n};\n\nAdmin.defaultProps = {\n    i18nProvider: defaultI18nProvider,\n    store: localStorageStore(),\n};\n\nexport default Admin;\n\nexport interface AdminProps extends CoreAdminProps {\n    theme?: ThemeOptions;\n    notification?: ComponentType;\n}\n","import defaultMessages from 'ra-language-english';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\n\nexport const defaultI18nProvider = polyglotI18nProvider(\n    () => defaultMessages,\n    'en',\n    {\n        allowMissing: true,\n    }\n);\n","export * from './Admin';\nexport * from './defaultI18nProvider';\nexport * from 'ra-core';\nexport * from 'ra-ui-materialui';\n"]},"metadata":{},"sourceType":"module"}